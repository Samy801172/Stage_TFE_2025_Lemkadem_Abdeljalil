import{a as $}from"./chunk-PRKGXYQV.js";import{D as l,G as f,J as d,a as h,b as u,i as E,ib as S,k as g,l as c,n as v,v as s}from"./chunk-OJEA5YKO.js";var m=function(i){return i.WORKSHOP="WORKSHOP",i.NETWORKING="NETWORKING",i.TRAINING="TRAINING",i.CONFERENCE="CONFERENCE",i.MEETUP="MEETUP",i.OTHER="OTHER",i}(m||{}),p=function(i){return i.UPCOMING="UPCOMING",i.ONGOING="ONGOING",i.COMPLETED="COMPLETED",i.CANCELLED="CANCELLED",i}(p||{});var C=(()=>{class i{constructor(e){this.http=e,this.apiUrl=`${$.apiUrl}/events`,this.eventsSubject=new E([]),this.events$=this.eventsSubject.asObservable(),console.log("[EventService] Initialized with URL:",this.apiUrl)}getEventsByMonth(e){return console.log("Fetching all events and filtering by month"),this.http.get(this.apiUrl).pipe(v(t=>{if(console.log("API Response:",t),!t||!t.data)return console.warn("No events data in response"),[];let r=e.getMonth(),n=e.getFullYear();return t.data.filter(o=>{let a=new Date(o.date);return a.getMonth()===r&&a.getFullYear()===n})}),l({next:t=>{console.log("Events filtered by month:",t),this.eventsSubject.next(t)},error:t=>console.error("Error loading events:",t)}),s(t=>(console.error("Error fetching events:",t),g([]))))}getEventsByDate(e){let t=e.toISOString().split("T")[0];return this.http.get(`${this.apiUrl}/date/${t}`)}createEvent(e){let t=u(h({},e),{participants_count:0,status:p.UPCOMING});return this.http.post(this.apiUrl,t).pipe(l(r=>{let n=this.eventsSubject.value;this.eventsSubject.next([...n,r])}),s(r=>(console.error("Error creating event:",r),c(()=>r))))}updateEvent(e,t){return this.http.patch(`${this.apiUrl}/${e}`,t).pipe(l(r=>{let n=this.eventsSubject.value,o=n.findIndex(a=>a.id===e);o!==-1&&(n[o]=r,this.eventsSubject.next([...n]))}),s(r=>(console.error(`Error updating event ${e}:`,r),c(()=>r))))}deleteEvent(e){return this.http.delete(`${this.apiUrl}/${e}`).pipe(l(()=>{console.log("Successfully deleted event:",e);let t=this.eventsSubject.value;this.eventsSubject.next(t.filter(r=>r.id!==e))}),s(t=>(console.error(`Error deleting event ${e}:`,t),c(()=>t))))}getUpcomingEvents(){return console.log("[EventService] Fetching upcoming events"),this.http.get(`${this.apiUrl}/upcoming`).pipe(v(e=>{let t=Array.isArray(e)?e:e?.data||[];return console.log("[EventService] Received upcoming events:",t),t}),l(e=>this.eventsSubject.next(e)),s(e=>(console.error("[EventService] Error fetching upcoming events:",e),c(()=>e))))}getUserEvents(){return this.getRegisteredEvents()}getRegisteredEvents(){return console.log("[EventService] Fetching registered events"),this.http.get(`${this.apiUrl}/registered`).pipe(v(e=>{let t=Array.isArray(e)?e:e?.data||[];return console.log("[EventService] Received registered events:",t),t}),s(e=>(console.error("[EventService] Error fetching registered events:",e),c(()=>e))))}registerForEvent(e){return console.log(`[EventService] Registering for event: ${e}`),this.http.post(`${this.apiUrl}/${e}/register`,{}).pipe(l(t=>{console.log("[EventService] Registration successful:",t);let r=this.eventsSubject.value,n=r.findIndex(o=>o.id===e);n!==-1&&(r[n]=t,this.eventsSubject.next([...r]))}),s(t=>(console.error("[EventService] Error registering for event:",t),c(()=>t))))}unregisterFromEvent(e){return console.log(`[EventService] Unregistering from event: ${e}`),this.http.delete(`${this.apiUrl}/${e}/register`).pipe(l(()=>{console.log("[EventService] Unregistration successful");let r=this.eventsSubject.value.map(n=>n.id===e?u(h({},n),{participants_count:Math.max(0,n.participants_count-1)}):n);this.eventsSubject.next(r)}),s(t=>(console.error("[EventService] Error unregistering from event:",t),c(()=>t))))}isRegisteredForEvent(e){return this.http.get(`${this.apiUrl}/${e}/is-registered`).pipe(v(t=>t.data),s(t=>(console.error("Error checking registration:",t),g(!1))))}getEventPaymentDetails(e){return this.http.get(`${this.apiUrl}/${e}/payment-details`)}getEventById(e){return console.log(`[EventService] Fetching event details for ID: ${e}`),this.http.get(`${this.apiUrl}/${e}`).pipe(l(t=>console.log("[EventService] Event details received:",t)),s(t=>(console.error("[EventService] Error fetching event details:",t),c(()=>t))))}resetEvents(){this.eventsSubject.next([])}refreshEvents(){console.log("Refreshing events...");let e=new Date;this.getEventsByMonth(e).subscribe({next:t=>{console.log("Events refreshed successfully:",t),this.eventsSubject.next(t)},error:t=>{console.error("Error refreshing events:",t)}})}getAllEvents(){return console.log("[EventService] Fetching all events"),this.http.get(this.apiUrl).pipe(v(e=>{let t=Array.isArray(e)?e:e?.data||[];return console.log("[EventService] Received events:",t),t}),l(e=>this.eventsSubject.next(e)),s(e=>(console.error("[EventService] Error fetching events:",e),c(()=>e))))}cancelRegistration(e){return this.http.post(`${this.apiUrl}/${e}/cancel`,{}).pipe(l(t=>{let r=this.eventsSubject.value,n=r.findIndex(o=>o.id===e);n!==-1&&(r[n]=t,this.eventsSubject.next([...r]))}),s(t=>(console.error(`Error canceling registration for event ${e}:`,t),c(()=>t))))}updateEventStatus(e,t){return t==="CANCELLED"?this.http.patch(`${this.apiUrl}/${e}`,{is_cancelled:!0}).pipe(l(r=>{let n=this.eventsSubject.value,o=n.findIndex(a=>a.id===e);o!==-1&&(n[o]=r,this.eventsSubject.next([...n]))}),s(r=>(console.error(`Error cancelling event ${e}:`,r),c(()=>r)))):(console.log("Changement de statut pour event.id =",e,"status =",t),this.http.patch(`${this.apiUrl}/${e}`,{status:t}).pipe(l(r=>{let n=this.eventsSubject.value,o=n.findIndex(a=>a.id===e);o!==-1&&(n[o]=r,this.eventsSubject.next([...n]))}),s(r=>(console.error(`Error updating status for event ${e}:`,r),c(()=>r)))))}cancelEvent(e){return this.http.patch(`${this.apiUrl}/${e}/cancel`,{})}confirmPresence(e){return this.http.post(`${this.apiUrl}/${e}/confirm-presence`,{})}static{this.\u0275fac=function(t){return new(t||i)(d(S))}}static{this.\u0275prov=f({token:i,factory:i.\u0275fac,providedIn:"root"})}}return i})();export{m as a,p as b,C as c};
